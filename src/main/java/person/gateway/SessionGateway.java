package person.gateway;

import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONObject;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import person.Person;
import person.User;
import person.db.DBConnect;
import person.utility.HashUtil;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;


public class SessionGateway {
    private static Connection connection;
    private static Logger logger = LogManager.getLogger();

    public SessionGateway(Connection conn){
        this.connection = conn;
    }


    public int authenticate(String text, String text1) throws IOException {
        //for now just authenticate ragnar and flapjack
            PreparedStatement st = null;
            ResultSet rs = null;
            int success = 0;
            try {
                logger.info("Trying to authenticate username & password: " + text + " " + text1);
                st = connection.prepareStatement("SELECT * FROM `User` WHERE `username` =? AND `password` =?");
                st.setString(1, text);
                st.setString(2, text1);
                st.executeQuery();
                rs = st.getResultSet();
                rs.first();
                logger.info("checked user db, returned " + rs.getRow());
                success = rs.getRow();
                st.close();
                return success;

            } catch (SQLException throwables) {
                logger.error("Could not find username & password");
                throwables.printStackTrace();
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        return 0;
    }

    //Create session token with username and timestamp generated by db
    public static String createSessionToken(String text){
        PreparedStatement st = null;
        ResultSet timeStamp = null;
        Timestamp time = null;
        String token = null;
        try{

            logger.info("username "+text);
            st = connection.prepareStatement("INSERT INTO `Session`(`username`) VALUES (?)");
            st.setString(1, text);
            st.executeUpdate();
            st = connection.prepareStatement("SELECT `time` FROM `Session` WHERE `username` =?");
            st.setString(1, text);
            st.executeQuery();
            timeStamp = st.getResultSet();
            timeStamp.first();
            time = timeStamp.getTimestamp("time");
            token = HashUtil.getCryptoHash(text + time.toString(), "SHA-256");
            logger.info("token is :" + token);

            st = connection.prepareStatement("UPDATE `Session` SET `token`=? WHERE `time` =?");
            st.setString(1, token);
            st.setTimestamp(2, time);
            st.executeUpdate();

        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }finally {
            try {
                if(st != null)
                    st.close();
                    return token;
            } catch (SQLException e2) {
                e2.printStackTrace();
                return "error";
            }
        }

    }


}
